[May 2, 2024]
    Array variable is pointer to the first element of array.
    We can refer to an element of an array as following:

        printf("address of array: %p\n", message);
        printf("3st element of array: %c\n", message[2]);
        printf("3st element of array: %c\n", *(message + 2));
    
    We can skip the array elements as following:

        char message[] = "Hello friends?!";
        puts(message + 6); // prints starting from "f", "friends?!"

        message[3] == *(message + 3) == *(3 + message) == 3[message]
    
    We can get user input with scanf:

        char name[40];
        printf("Enter your name: ");
        scanf("%39s", name); // gets up to 39 character and \0
    
    We can get numeric values:

        int age;
        printf("Enter your age: ");
        scanf("%i", &age);

    We can get multiple inputs at once:

        char first_name[20];
        char last_name[20];
        printf("Enter your first and last name: ");
        scanf("%19s %19s", first_name, last_name);
        printf("First: %s, Last: %s\n", first_name, last_name);
    
    If we forget to set limit in scanf and user inputs more data than supposed
    it causes buffer owerflow

    We can use fgets(), so we can not forget to set the size of input
    because fgets() signiture requires to set maximum input size then it works

        char food[5];
        printf("Enter favorite food: ");
        fgets(food, sizeof(food), stdin);
        printf("%s\n", food);

    String litiral never can be updated. String literals are stored in read-only memory.

[May 5, 2024]
    The C language orovides some ready libraries to save our time. One of them is
    string.h library. It specialised to work with strings. It contains functions, which 
    can help up to work with strings. It containes following functions:

    - strchr() - finds a char in string
    - strstr() - finds substring
    - strlen() - returns length of string

    We can redirect standart input and output to a file with ">" and "<" respectively.

    ./geo2json < gpsdata.csv > output.json

    "<" - redirects standart inout to a file
    ">" - redirects standart output to a file
    "2>" - redirects standart error to a file

    Here we are redirecting the gpsdata to standart input of geo2json and redirecting
    the standard output of geo2json to output.json

    But, there is one problem. The problem is when the geo2json encounters an error while processing
    passed data, it writes the error message also to output json file. And nothing will be noticable
    in terminal. To prevent this and output the error to terminal, we can use fprintf().

    fprintf() is general version of printf():

    printf("Hello there!");
    fprintf(stdout, "Hello there!"); // here we can change use stderr, stdout.

    above the code outputs the same output. We can specify the outpout type with fprintf(outType, "Output");

    While redirecting all standard outputs of geo2json to a json file, we can output the error to standard error
    stream. So, the standars error stream aways outputted to rerminal.

    printf("Error!"); // redirected to file
    fprintf(stderr, "Error"); // redirected to display/terminal

    We can redirect only the standard error with "2>".

[May 13, 2024]
    Outputting multiple files
    We can creat a stream on fly. Each data stream is represented by a pointer to a file.
    And, we can create a new data stream with "fopen()" function:

    FILE *in_file = fopen("input.txt", "r");

    This will create a data stream to read FROM file here. fopen() gets two arguments,
    the first one is file name and second one is the "r" reading mode. Total, there are
    three modes, "r" is reading, "w" is writing and "a" is appending mode.

    FILE *out_file = fopen("output.txt", "r"); // creates stream in read mode

    here is the stream to write to a file.

    To make it simple, the fopen() function creates streams in different modes (read, write and append).
    fscanf() reads different types of streams, any file also can be read as a stream. Here, the fscanf() function
    reading a file pointer as a stream.
    The fscanf() function reads stream:

        int fscanf(FILE *ptr, const char *format, ...);

    The fprintf() function is the same with fscanf(), but opposite of the fscanf(). It outputs stream in different 
    wats, here it is outputting a file.
    The fprintf() function writes stream:
    
        int fprintf(FILE *stream, const char *format, ...)
        
[May 20, 2024]

    