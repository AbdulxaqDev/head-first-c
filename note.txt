[May 2, 2024]
    Array variable is pointer to the first element of array.
    We can refer to an element of an array as following:

        printf("address of array: %p\n", message);
        printf("3st element of array: %c\n", message[2]);
        printf("3st element of array: %c\n", *(message + 2));
    
    We can skip the array elements as following:

        char message[] = "Hello friends?!";
        puts(message + 6); // prints starting from "f", "friends?!"

        message[3] == *(message + 3) == *(3 + message) == 3[message]
    
    We can get user input with scanf:

        char name[40];
        printf("Enter your name: ");
        scanf("%39s", name); // gets up to 39 character and \0
    
    We can get numeric values:

        int age;
        printf("Enter your age: ");
        scanf("%i", &age);

    We can get multiple inputs at once:

        char first_name[20];
        char last_name[20];
        printf("Enter your first and last name: ");
        scanf("%19s %19s", first_name, last_name);
        printf("First: %s, Last: %s\n", first_name, last_name);
    
    If we forget to set limit in scanf and user inputs more data than supposed
    it causes buffer owerflow

    We can use fgets(), so we can not forget to set the size of input
    because fgets() signiture requires to set maximum input size then it works

        char food[5];
        printf("Enter favorite food: ");
        fgets(food, sizeof(food), stdin);
        printf("%s\n", food);

    String litiral never can be updated. String literals are stored in read-only memory.

[May 5, 2024]
    The C language orovides some ready libraries to save our time. One of them is
    string.h library. It specialised to work with strings. It contains functions, which 
    can help up to work with strings. It containes following functions:

    - strchr() - finds a char in string
    - strstr() - finds substring
    - strlen() - returns length of string

    We can redirect standart input and output to a file with ">" and "<" respectively.

    ./geo2json < gpsdata.csv > output.json

    "<" - redirects standart inout to a file
    ">" - redirects standart output to a file
    "2>" - redirects standart error to a file

    Here we are redirecting the gpsdata to standart input of geo2json and redirecting
    the standard output of geo2json to output.json

    But, there is one problem. The problem is when the geo2json encounters an error while processing
    passed data, it writes the error message also to output json file. And nothing will be noticable
    in terminal. To prevent this and output the error to terminal, we can use fprintf().

    fprintf() is general version of printf():

    printf("Hello there!");
    fprintf(stdout, "Hello there!"); // here we can change use stderr, stdout.

    above the code outputs the same output. We can specify the outpout type with fprintf(outType, "Output");

    While redirecting all standard outputs of geo2json to a json file, we can output the error to standard error
    stream. So, the standars error stream aways outputted to rerminal.

    printf("Error!"); // redirected to file
    fprintf(stderr, "Error"); // redirected to display/terminal

    We can redirect only the standard error with "2>".

[May 13, 2024]
    Outputting multiple files
    We can creat a stream on fly. Each data stream is represented by a pointer to a file.
    And, we can create a new data stream with "fopen()" function:

    FILE *in_file = fopen("input.txt", "r");

    This will create a data stream to read FROM file here. fopen() gets two arguments,
    the first one is file name and second one is the "r" reading mode. Total, there are
    three modes, "r" is reading, "w" is writing and "a" is appending mode.

    FILE *out_file = fopen("output.txt", "r"); // creates stream in read mode

    here is the stream to write to a file.

    To make it simple, the fopen() function creates streams in different modes (read, write and append).
    fscanf() reads different types of streams, any file also can be read as a stream. Here, the fscanf() function
    reading a file pointer as a stream.
    The fscanf() function reads stream:

        int fscanf(FILE *ptr, const char *format, ...);

    The fprintf() function is the same with fscanf(), but opposite of the fscanf(). It outputs stream in different 
    wats, here it is outputting a file.
    The fprintf() function writes stream:
    
        int fprintf(FILE *stream, const char *format, ...)
[May 20, 2024]
    We can get command line arguments as main function arguments.
    The main function gets arguments as array of strings, and length of that array.

    int main(int argc, char *argv[]){} // argc is a number of elemets and argv is array of strings that cli arguments.

    So, c provides a special function that handles cli command in a confortable way.
    It is getopt(argc, argv, "d:t"), this function returns a character.
    So we can iterate it with file:

            char ch;

            while ((ch = getopt(argc, argv, "d:t")) != EOF)
                switch (ch)
                {
                case 'd':
                    delivery = optarg;
                    break;
                case 't':
                    thick = 1;
                    break;
                defautl:
                    fprintf(stderr, "Unknown option: '%s'\n", optarg);
                    return 1;
                }
[May 22, 2024]

    So, the C languhe has different types based on the data type, which reqiueres different memory size.

    They are char, short, int, long, float and double.

    The short can not handle int or long numbers, becuase of its memory allocation is small.

    Almost, all types based on numbers: integer and float. Even characters are registered on computer memory as numbers.
    computer sees 65 as "A" letter.

[May 23, 2024]
    Header files.

    If we want to use one source code in seperate file, we need to create it is header file.

    For example, we have following function in seperate logger.c file:

        void logger(char *message)
        {
            printf("%s", message);
        }
    
    And we need to create header file called logger.h and we keep the signiture of the function
    in that header file:

        void logger(char *message);

    and need to include the header file in the c file as following:

        // inside logger.c file
        #include "logger.h"

    And, to use the logger function in other.c file, we need to include it is header:

        // inside other.c file
        #include "logger.h"

    The last one, we need to compile files toger which are included with gcc:

        gcc other.c logger.c -o all

    Object files

    As project gets bigger, files get more and more. And, the time to compile that project gets bigger.
    To prevent this kind of time consuming, we can compile of all files to object files. Then we can link them
    together to create executable file.

    The benefit of compiling each file to object, if we upcate one of the source files, we just need to recompole that
    updated file to object file again instead of all sources files then link them together to generate executable file.

    This prevents us to recompile all unchanged files and saves compilation time.

    Make 

    We have a tool called make, it helps us to automate the compilation of only updated files and make executable
    file.

    Every file that make compiles is called "target".

    Every target need be told two things:

        1. the dependencies
            which files the target is going to be generated from.
        2. the recipe
            the set of instructions it needs to run to generate file.
    Together, those two form the rule. A rule tells to make all what to do.

[May 25, 2024]
    Make

    The tool make can track updated files and only recompiles updated files only.
    That saves compilation time.
[May 27, 2024]
    Struckts, Unions and Bitfields

    Struct can hold different types of data.
    we can create a struct as following:

    struct fish {
        const char *name;
        const char *species;
        int teeth;
        int age;
    };

    The name and species properties that only hold the pointer to strings.
    When we assign to another vriable, we just telling to computer to copy that data.

    Struct can have another struct as a property, it is called nesting. Following:

        struct exercise
        {
            const char *description;
            float duration;
        };

        struct meal
        {
            const char *ingredients;
            float weight;
        };

        struct preferences
        {
            struct meal food;
            struct exercise exercise;
        };

        struct fish
        {
            const char *name;
            const char *species;
            struct preferences care;
        };

    As you can see, we need to use the "struct" keyword always when we use it, even inside of another struct.
    To get rid of being wordy like that, we can use "typedef" keyword to create alias to a struct in c, as following:
    (struct with alias, without name is also called anonymous struct)

        typedef struct cell_phone {
            int cell_no;
            const char *wallpaper;
            float minutes_of_charge;
            } phone;

        or
        
        typedef struct { // without struct name, only type name
            int cell_no;
            const char *wallpaper;
            float minutes_of_charge;
            } phone;


    then we can use this "phone" type without "struct" word as following:

        phone p = {5557879, "sinatra.png", 1.35};
[June 3, 2024]
    Unions
    Unions can hold different type of data types. But, one data type, it can hold.
    To creat a union, we use union keyword

        typedef union {
            short count;
            float weight;
            float volume;
        } quantity;

        quantity q = {.count = 5};
        q.weight = 5.5;
    
    On memory, union takes memory for one type, which gets biggest place;
    Because, it targets the biggest type size to allocate memory.
[June 4, 2024]
    Enum
    Enum is similar is to struct, but it sets number(kind of index) to its each prperty, called symbols. 
    If we use enum, union and struct together:

        typedef enum
        {
            COUNT,
            KILOGRAM,
            LITRE,
        } unit_of_measure;

        typedef union
        {
            short count;
            float weight;
            float litre;
        } measure;

        typedef struct
        {
            const char *name;
            measure amount;
            unit_of_measure units;
        } fruit;

    based on enum, we can know which type of union is used

    Bitfields
    Some times we want to store only yes or no value or 1 or 0.

    if we user short:

    short isTrue = 0; // 00000000

    As you can see, even  with short type, if we only want 0 or 1, it uses 2 bytes of
    memory, waste of memory.

    With bitfields we can use just one bit for that kind of case.
    To use it, we need to group that kind of variables to struct, then struct stores 0 and 1
    consequitivly in memory. Bitfields can store a custem number of bits.

    To use bitfields in struct, integer should be unsigned:

        typedef struct {
            unsigned int first_visit: 1;
            unsigned int come_again: 1;
        } survey;
    
[June 5, 2024]
    Flexible data
    Linked list, we can implement linked list with struct in C language.
    One thing, we need to set struct name for a struct to make pointer for it.
    We can not use only typedef, if we use struct pointer, need to provide struct name
    with alias name.

        typedef struct island
        {
            char *name;
            char *opens;
            char *closes;
            struct island *next;
        } island;

        island amity = {"Amity", "09:00", "17:00", NULL};
        island craggy = {"Craggy", "09:00", "17:00", NULL};
        island isla_nublar = {"Isla Nublar", "09:00", "17:00", NULL};
        island shutter = {"shutter", "09:00", "17:00", NULL};

        amity.next = &craggy;
        craggy.next = &isla_nublar;
        isla_nublar.next = &shutter;

        // inserting
        island skull = {"Skull", "09:00", "17:00", NULL};
        isla_nublar.next = &skull;
        skull.next = &shutter;
[June 7, 2024]
    Dynamic memory
    We can ask for an amount of memory to locate data in C, with malloc() function.
    to use it, we need to include stdlib.h header. When allocate memory with malloc() function
    we need to free that allocated memory, with free() function.
[June 14, 2024]
    Valgrind, checking leaks.

    valgrind is a linux program that checks leaks. It intercepts the malloc and free, and keeps track of those
    functions. Checks all located and freed data, if any left in heap, it gives all information about it.
    If there is no any leaks, it ensures that a program does not have any leaks.

    as I am using linux subsystem on one device, WSL does not have valgrind in my case.
    To install it:

    $ apt-get install valgrind

    to check leaks on a programm:

    first compile the program with debug mode:

    $ gcc -g -o program program.c

    second check the leaks on that program:

    $ valgrind -s --leaks-check=full ./program

    -s shows all error and --leaks-check=full gives full detailed information.

    in mack book, we use "leaks" program instead of "valgrind"
[June 15, 2024]
    Function pointers

    Every function name in C language is a pointer, which points to code in memory.
    We can use function pointers to pass a function to a function as a paramater.
    And, we can create function pointer variables to store function pointer and use that
    variable as the function it is pointing to.

    We can declare a functio variable as following:

    returnType (*functionName)(funcParamType);
        
        #include <stdio.h>
        #include <string.h>

        char *text = "William: SBM GSOH likes sports, TV, dining";

        int sports(char *s)
        {
            return strstr(s, "sports") != NULL;
        }

        int arts(char *s)
        {
            return strstr(s, "arts") != NULL;
        }

        void find(int (*match)(char *))
        {
            if(match(text))
                puts(text);
        }

        int main()
        {
            int (*pFunc)(char *);
            pFunc = sports; // here the match_fn works as sports.
            
            find(arts);
            find(pFunc);
            
            return 0;
        }
    As above, we can pass a function to a function as an argument and use it.
    And, we can declare function pointer variable to store a function pointer and 
    use it as that function.
[June 18, 2024]
  Function pointer array
  So we can use function pinters to make code more compact
[June 20, 2024]
    enum tResponse{ DUMP,  SECOND_CHANCE, MARRIAGE };

    typedef struct {
      const char *name;
      enum tResponse type;
    }  response;

    void dump(response r){
      puts(r.name);
      printf("you are dump, so the relationship is finished\n", r.name);
    }

    void second_chance(response r){
      puts(r.name);
      printf("you are lucky, so you have a second chance\n", r.name);
    }

    void marriage(response r){
      puts(r.name);
      printf("you are AMAZING, YOU ARE GOING TO HAVE A MARRIAGE\n", r.name);
    }

    void (*replies[])(response) = { dump, second_chance, marriage };
    response r[] = {
      { "Brendan", MARRIAGE },
      { "Jpohn", DUMP },
      { "Jonatan", SECOND_CHANCE },
      { "Bekham", DUMP }
    };

    int main()
    {
      for(int i = 0; i < 4; i++){
          puts("--------");
          (replies[r[i].type])(r[i]);
      }
      puts("--------");

      return 0;
    } 
   
     As we can see above, we are using functions as an array of (function) pointers.
    And, we can iterate through the function pointers at the same time through responses.
    
    Libs
    Most of the we want to reuse one piece of code many times. So, may want to use a code    as a standard library, we need to import that code as "libSome.h". But, first we need    to compile our code and locate it in a special place, where the C compiler can see and find that code.
    Most of the time in unix based systems, compiles look for files in one of the 
    following directories:
      1. /user/local/include // most used for third-party libs header files
      2. /user/include // mostly used for operating system header files

      But, what if we want to share the code with others to use?
      We can header files and object files/

      Sharing header files:
        1. We can store header files in /user/local/include to make it globally available
          and we can user angle brackets to import that header files.
        2. We can store the header files on different location and we need to use full pathname in double quotes.
        3. Lastly, we can pass the header file path in command line with "-I" flag:
          gcc -I/some/path/to/headerfiles test_code.c ... -o test
        
[June, 21]
    Archiving
    
    Sharing object files:
    We can store object files in a specific directory then we can point to them with full path name
    while compiling a program.

    gcc -I/my_header_files test_code.c /my_object_files/encrypt.o /my_obejct_files/checksum.o -o test_code

    as we can see,  we point to object files with their full path name
    
    But, as we improve a library we tend to have more files and compiles those files with full pathname
    becomes really difficult, to prevent this, we can archive a bunc of files together.
    
    So, we can archive all object files to one archive,  a library, with extension of .a 
    after archiving, we have two option:
    
      1. we can store the our library to /usr/lib/  to make it gloabal and can be imported with angle brackets.
      2. we can store them in a specific directory and point to it with -L flag following archivepathname and name of library while compiling.

      if we have library with name of "libsecurity", we should refer to it as "-lsecurity"
      all libraries have "lib" prefix.
      
      gcc test_code.c -L/my_libs -lsecurity -o test

    In Short:
      we have header and object files.
      
      Headers files
      We can store header files in "/usr/local/include/" directory and they will be gloabe and can be use those header files by including
      with angle brackets <some_header.h>

      or 

      we can store header files in a specific directory and we need to tell to compiler where our header files are located
      with -I flag in command line, as following:

        gcc some_code.c -I/some/header/directory other_code.o -o some_code
      
      Object files
      We can tell to compiler where object files are located with full path names as following

        gcc test_code.c /some/object_file1.o -o test_code

      But, we may have many object files and can not write each of them in command line
      So, we can archive those all object files to one file then use it globally or in a specific library.

      We can create an archive of object files as following:

        ar -rcs libsomelibrary.a some1.o some2.o
      
      we can locate it to "/usr/local/lib" and compiler can see it 
        
        gcc some.c -lsomelibrary -o some

      as you can see, there an convention, we need to add "lib" prefix to archive name and when we use it on command line
      we need to make that "lib" to "l", like "libapple.a", in command line "-lapple"

      or 

      we can put any other directory and we need to tell to compiler where it located with -L flag

        gcc some.c -L/my_libs/  -lapple -o some_code
    
    Headers in <> angle brackets are read from standard directories:
      /usr/include and C:\MinGW\include
      
    -L flag should appear after source files:
      gcc source.c -L // right
      gcc -L/some_lib source.c // wrong

    with nm command we can see what is inside archive libraries:

      nm libsecurity.a 

      or 

      ar -t libsecurity.a

    output(nm):
      
      encrypt.o:
      0000000000000000 T _encrypt
      0000000000000000 t ltmp0
      0000000000000050 s ltmp1

      checksum.o:
      0000000000000000 T _checksum
      0000000000000000 t ltmp0
      0000000000000060 s ltmp1

      Here is T means it is function, _encrypt and _checksum are function in libsecurity.a library.
     
    output(ar -t)

      __.SYMDEF SORTED
      encrypt.o
      checksum.o

    we can extract arcived object file with following command:

      ar -x libsomelibrary.a encrypt.o
[June 22, 2024]
  Dynamic linking (happens at runtime)
  
  we can create object files first as "position independent code" "PIC". So we use an extra flag to tell the gcc, "-fPIC"
    gcc -I/includes -fPIC -c some_code.c -o some_code.o 
 
[July 18, 2024]
  System calls and processes
    We can do system calls indside of code. In C, there are functions that can call a process to execute a program.
    To use those functions we need "stdlib.h" library. We can do system calls with system() function.
    system() function is the same as running a command in terminal. So, it gets a string argument.

    system("say 'Hello there!'") // this is read in mack

    or we can get an input from user and add extra things to input and execute it. This makes the system() unsafe, wich it takes
    string, user can pass any kind of command to execute. And, most of the time we need a structured way of executing command.

    For that, we have "exec()" functions. They get structured command line arguments and have different versions.
    Main there are two exec function types, list and vector based. And, each of these types have its own three types based on the
    arguments they get.

    Those functions are:
      execl(), execle(), execlp()
      execv(), execve(), execvp()
[July 19, 2024]
  Main difference between system() and exec() functions:
    system() :
      system function uses fork() in kernel level to create child process
      then uses exec() function to execute the command. At the same time the main process
      waits the child pricess to complete. Here, main process is the process which runs system function
      and uses some kind of wait function for child process, child process is terminated after its execution then main process
      continuous its execution.
      
    exec() :
      exect function do not fork and do not create child process. exec functions replacess the main process, which runs the exec functions.
      So the PID (process identififier) for main process and the process of exec function are always the same, because, as said above, the exec
      replacess the main process and continues to use main process. The OS replaces the main process image with exec process image.

    At kernel level, system() is combination of fork(), exec() and wait(),
    the exec() directly replaces the main process without making new process with fork.

[July 22, 2024]
  Difference between exec functions
    All exec functions have the same prefix exec..() and different postfix based on the argument types they get.

         l _____       
        / \     \
    exec   p     e
        \ /     /
         v ____/


  so we can have:
    execl() - executes a program specified by a path with a LIST of arguments.
    execle() - executes a program specified by a path with a LIST of arguments and an ARRAY of environment variables. 
    execlp() - executes a program specified by a path with a LIST of arguments. 
                It searches the executable in the directory
                given in the path
    execlpe() - executes a program specified by a path with LIST of arguments and ARRAY of envirenment variable. 
                It searches the executable in the directory given in the path


    execv() - executes a program specified by a path with an ARRAY of arguments.
    execve() - executes a program specified by a path with  an ARRAY of arguments and an ARRAY of environment variables. 
    execvp() - executes a program specified by a path with an ARRAY of arguments. 
                It searches the executable in the directory
                given in the path
    execvpe() - executes a program specified by a path with an ARRAY of arguments and ARRAY of envirenment variable. 
                It searches the executable in the directory given in the path
    
    so in all exec funtions, the arguments list's or array's the last element should be NULL, and the envirements vrairbles array's last element
    should be NULL.

    






